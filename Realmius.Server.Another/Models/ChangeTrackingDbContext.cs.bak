using System.Data.Entity;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System;
using System.Collections.Generic;
using System.Reflection;
using Newtonsoft.Json;
using RealmSync.SyncService;

namespace RealmSync.Server.Models
{
    public class ChangeTrackingDbContext : DbContext
    {

        public static event EventHandler<UpdatedDataBatch> DataUpdated;
        protected virtual void OnDataUpdated(UpdatedDataBatch e)
        {
            DataUpdated?.Invoke(this, e);
        }

        private readonly string _nameOrConnectionString;
        private IRealmSyncServerDbConfiguration _syncConfiguration;
        private Dictionary<Type, SyncTypeInfo> _syncedTypes;

        public ChangeTrackingDbContext(string nameOrConnectionString, IRealmSyncServerDbConfiguration syncConfiguration)
            : base(nameOrConnectionString)
        {
            _nameOrConnectionString = nameOrConnectionString;
            Initialize(syncConfiguration);
        }
        public ChangeTrackingDbContext(IRealmSyncServerDbConfiguration syncConfiguration)
        {
            _nameOrConnectionString = Database.Connection.ConnectionString;
            Initialize(syncConfiguration);
        }

        /// <summary>
        /// this will share everything!
        /// </summary>
        public ChangeTrackingDbContext(string nameOrConnectionString, Type typeToSync, params Type[] typesToSync)
            : base(nameOrConnectionString)
        {
            _nameOrConnectionString = nameOrConnectionString;
            Initialize(typeToSync, typesToSync);
        }
        /// <summary>
        /// this will share everything!
        /// </summary>
        public ChangeTrackingDbContext(Type typeToSync, params Type[] typesToSync)
        {
            _nameOrConnectionString = Database.Connection.ConnectionString;
            Initialize(typeToSync, typesToSync);
        }

        private void Initialize(Type typeToSync, Type[] typesToSync)
        {
            var syncConfiguration = new ShareEverythingRealmSyncServerConfiguration(typeToSync, typesToSync);
            Initialize(syncConfiguration);
        }

        private void Initialize(IRealmSyncServerDbConfiguration syncConfiguration)
        {
            if (syncConfiguration == null)
                return;

            _syncConfiguration = syncConfiguration;
            _syncedTypes = new Dictionary<Type, SyncTypeInfo>();
            foreach (Type type in _syncConfiguration.TypesToSync)
            {
                var propertyDict = new Dictionary<string, bool>();
                foreach (PropertyInfo propertyInfo in type.GetProperties())
                {
                    var ignore = propertyInfo.GetCustomAttribute<JsonIgnoreAttribute>() != null;
                    propertyDict[propertyInfo.Name] = !ignore;
                }

                _syncedTypes[type] = new SyncTypeInfo()
                {
                    TypeName = type.Name,
                    TrackedProperties = propertyDict,
                };
            }

        }


        protected virtual IList<string> GetTagsForObject(ChangeTrackingDbContext db, IRealmSyncObjectServer obj)
        {
            return _syncConfiguration.GetTagsForObject(db, obj);
        }
        public override int SaveChanges()
        {
            return ProcessChanges();
            //return base.SaveChanges();
        }

        protected virtual int ProcessChanges()
        {
            int result = 0;
            try
            {
            var syncStatusContext = CreateSyncStatusContext();

            var updatedResult = new UpdatedDataBatch();
            var dateTimeNow = GetDate();

                var entries = ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Modified
                        || e.State == EntityState.Added
                        || e.State == EntityState.Deleted
                    ).Select(x => new
                    {
                        ModifiedProperties = x.CurrentValues.PropertyNames.ToDictionary(z => z, z => x.Property(z).IsModified),
                        Entity = x.Entity,
                        CurrentValues = x?.CurrentValues?.Clone(),
                        OriginalValues = x.State == EntityState.Added ? null : x?.OriginalValues?.Clone(),
                        State = x.State,
                    }).ToList();
                result = base.SaveChanges();

                foreach (var entity in entries)
            {
                if (!_syncedTypes.ContainsKey(entity.Entity.GetType()))
                    continue;
                var syncTypeInfo = _syncedTypes[entity.Entity.GetType()];

                var obj = (IRealmSyncObjectServer)entity.Entity;
                var syncObj = AddOrCreateNewSyncObject(syncStatusContext, obj.GetType().Name, obj.MobilePrimaryKey);
                string changes;
                if (entity.State == EntityState.Modified)
                {
                    var diff = new Dictionary<string, object>();

                    foreach (var propName in entity.CurrentValues.PropertyNames)
                    {
                        if (!syncTypeInfo.TrackedProperties[propName])
                            continue;

                        var current = entity.CurrentValues[propName];
                        //var original = entity.OriginalValues[propName];
                            if (entity.ModifiedProperties[propName])
                        {
                            diff[propName] = current;
                            syncObj.ColumnChangeDates[propName] = dateTimeNow;
                        }
                    }
                    changes = JsonConvert.SerializeObject(diff);
                }
                else if (entity.State == EntityState.Added)
                {
                    foreach (var propName in entity.CurrentValues.PropertyNames)
                    {
                        if (!syncTypeInfo.TrackedProperties[propName])
                            continue;

                        syncObj.ColumnChangeDates[propName] = dateTimeNow;
                    }
                    changes = JsonConvert.SerializeObject(obj);
                }
                else if (entity.State == EntityState.Deleted)
                {
                    syncObj.IsDeleted = true;
                    changes = "";
                }
                else
                {
                    throw new ArgumentOutOfRangeException($"Entity state '{entity.State}' is not supported");
                }

                Process(syncObj, obj);
                var downloadResponseItem = new DownloadResponseItem()
                {
                    Type = syncObj.Type,
                    IsDeleted = syncObj.IsDeleted,
                    MobilePrimaryKey = syncObj.MobilePrimaryKey,
                    SerializedObject = changes,
                };
                updatedResult.Items.Add(new DownloadResponseItemInfo()
                {
                    DownloadResponseItem = downloadResponseItem,
                    Tag0 = syncObj.Tag0,
                    Tag1 = syncObj.Tag1,
                    Tag2 = syncObj.Tag2,
                    Tag3 = syncObj.Tag3,
                });
            }

            if (updatedResult.Items.Count > 0)
            {
                syncStatusContext.SaveChanges();

                OnDataUpdated(updatedResult);
            }
            }
            catch (Exception e)
            {
                //Console.WriteLine(e);
                throw;
            }

            return result;
        }

        internal virtual DateTimeOffset GetDate()
        {
            return DateTimeOffset.Now;
        }

        private SyncStatusServerObject AddOrCreateNewSyncObject(SyncStatusDbContext syncStatusContext, string type, string mobilePrimaryKey)
        {
            var syncObj = syncStatusContext.SyncStatusServerObjects.Find(type, mobilePrimaryKey);
            if (syncObj == null)
            {
                syncObj = new SyncStatusServerObject(type, mobilePrimaryKey);
                syncStatusContext.SyncStatusServerObjects.Add(syncObj);
            }
            return syncObj;
        }

        private SyncStatusDbContext CreateSyncStatusContext()
        {
            // var connectionString = Database.Connection.ConnectionString;
            var syncStatusContext = new SyncStatusDbContext(_nameOrConnectionString);
            return syncStatusContext;
        }

        protected virtual void Process(SyncStatusServerObject syncObj, IRealmSyncObjectServer obj)
        {
            var typeName = obj.GetType().Name;
            var tags = GetTagsForObject(this, obj);
            if (tags.Count > 0)
                syncObj.Tag0 = tags[0];
            if (tags.Count > 1)
                syncObj.Tag1 = tags[1];
            if (tags.Count > 2)
                syncObj.Tag2 = tags[2];
            if (tags.Count > 3)
                syncObj.Tag3 = tags[3];

            syncObj.FullObjectAsJson = JsonConvert.SerializeObject(obj);
            syncObj.LastChange = DateTime.UtcNow;
            syncObj.Type = typeName;
            syncObj.UpdateColumnChangeDatesSerialized();
        }

        public override Task<int> SaveChangesAsync()
        {
            ProcessChanges();
            return base.SaveChangesAsync();
        }

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ProcessChanges();
            return base.SaveChangesAsync(cancellationToken);
        }
    }
}